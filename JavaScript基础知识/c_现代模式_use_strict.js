// 现代模式
// 长久以来，JavaScript 向前发展，并且未带来任何兼容性问题。新的特性被加入，旧功能也没有改变。
// 这么做有利于兼容旧代码。但缺点是 JavaScript 的创造者的任何错误和不完善的决定也将永远保留在 JavaScript 语言中

// 这总情况一直持续到 2009年 ES5 的出现，ES5 增加了新的语言特性，并且修改了一些已经存在的特性。
// 为了保证旧功能能够使用，大部分修改是默认不生效的，需要特殊指令 "use strict" 来明确的激活这些特性。

// "use strict"
// 这个指令看上去像一个字符串，"use strict" 或者 'use strict', 当它处于脚本文件顶部时，则整个脚本文件
// 都将以 "现代" 模式进行工作。

// 注意：一定确保 "use strict" 出现在脚本的最顶部，否则严格模式可能无法启动。
// 只有注释可以出现在 "use strict" 的上面。
"use strict";

// 错误示例
// alert("some code");
// 下面的 "use strict" 会被忽略，必须在最顶部。
// "use strict"; 严格模式没有被激活

// 注意：
// 没有办法取消 use strict
// 没有类似于 "no use strict" 这样的指令使得程序返回默认模式。 一旦进入严格模式，就不能回头了

// 很快我们就会学习函数，所以我们要提前注意一下，"use strict" 可以被放在函数体的开头。
// 这样可以只在该函数中启用严格模式。
// 但是通常我们会在整个脚本中启用严格模式

// 现代 JavaScript 支持 "class" 和 "module" -- 高级语言结构，它们会自动启用 use strict。
// 因此我们使用它们，无需添加 use strict。
